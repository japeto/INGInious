{"version":3,"sources":["ultimate_pagination.jsx","bank_course.jsx","course_autosuggest.jsx","custom_alert.jsx","bank_course_list.jsx","task.jsx","task_list.jsx","bank_page.jsx","index.js"],"names":["itemTypeToComponent","ITEM_TYPES","PAGE","value","isActive","onClick","className","href","ELLIPSIS","FIRST_PAGE_LINK","PREVIOUS_PAGE_LINK","NEXT_PAGE_LINK","LAST_PAGE_LINK","UltimatePagination","createUltimatePagination","WrapperComponent","children","BankCourse","props","context","state","showModal","open","bind","close","onDeleteCourse","this","setState","courseId","id","deleteCourse","callbackOnDeleteCourse","removable","name","role","show","onHide","animation","bsSize","Header","closeButton","Title","Body","bsStyle","Footer","React","Component","CourseAutosuggest","getSuggestions","normalizedValue","toUpperCase","courses","filter","course","startsWith","renderSuggestion","suggestion","query","isHighlighted","onChange","event","newValue","onConfirm","selectedCourse","callbackOnClick","getSuggestionValue","suggestions","inputProps","placeholder","md","mdInput","onSuggestionsFetchRequested","onSuggestionsClearRequested","mdButton","disabled","messageButton","warning","showCancel","confirmBtnText","confirmBtnBsStyle","cancelBtnBsStyle","title","alertTitle","onCancel","alertText","mdHidden","CustomAlert","timer","handleDelayedDismiss","handleAlertDismiss","clearTimeout","updateParent","callbackParent","forceUpdate","setTimeout","callbackSetAlertInvisible","isVisible","styleAlert","onDismiss","titleAlert","message","BankCourseList","getListOfCourses","map","i","page","limit","is_removable","key","length","getListOfAvailableCourses","availableCourses","pageAvailableCourses","dataAlert","data","isVisibleAlert","callbackOnChildChangedClose","callbackAddCourse","currentPage","totalPages","callbackOnPageChange","totalAvailableCoursePages","callbackOnPageAvailableCourseChange","Task","taskId","task_info","task_id","bankId","course_id","addTaskToCourse","callBackAddTaskToCourse","course_name","task_name","tags","join","componentClass","bsClass","task_author","dangerouslySetInnerHTML","__html","task_context","TaskList","onChangePage","console","log","callbackUpdateTasks","callbackUpdateFilteredTasks","getListOfTasks","tasks","task","handleChange","e","newStateQuery","target","updateFilteredTasks","type","BankPage","availableCoursesToCopy","pageTasks","pageCourses","totalPagesTasks","totalPagesCourses","totalPagesAvailableCourses","dataAlertCourseList","dataAlertTaskList","tasksQuery","onPageCourseChange","updateBankCoursesAsync","updateTasksAsync","updateAvailableCoursesAsync","updateAvailableCoursesToCopyAsync","updateFilteredTasksAsync","addCourse","onAlertTaskListClose","onAlertCourseListClose","setAlertCourseListInvisible","setAlertTaskListInvisible","onPageAvailableCourseChange","$","getJSON","then","newCourses","Math","ceil","url","response","newTotalPages","ajax","param","success","done","error","post","filteredTasks","targetId","request_data","defaultActiveKey","eventKey","callbackUpdateTask","callbackUpdateBank","callbackUpdateAvailable","ReactDOM","render","document","getElementById"],"mappings":"6QAqCMA,EAAsB,CACxB,CAACC,aAAWC,MA/BH,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,QAAnB,OAET,wBAAIC,UAAWF,EAAW,SAAW,MAAM,uBAAGG,KAAK,IAAIF,QAASA,GAAUF,KA8B1E,CAACF,aAAWO,UA3BC,SAAC,GAAD,IAAEH,EAAF,EAAEA,QAAF,OAEb,4BAAI,uBAAGE,KAAK,IAAIF,QAASA,GAArB,SA0BJ,CAACJ,aAAWQ,iBAvBM,SAAC,GAAD,EAAEL,SAAF,IAAYC,EAAZ,EAAYA,QAAZ,OAElB,4BAAI,uBAAGE,KAAK,IAAIF,QAASA,GAArB,UAsBJ,CAACJ,aAAWS,oBAnBS,SAAC,GAAD,EAAEN,SAAF,IAAYC,EAAZ,EAAYA,QAAZ,OAErB,4BAAI,uBAAGE,KAAK,IAAIF,QAASA,GAArB,YAkBJ,CAACJ,aAAWU,gBAfK,SAAC,GAAD,EAAEP,SAAF,IAAYC,EAAZ,EAAYA,QAAZ,OAEjB,4BAAI,uBAAGE,KAAK,IAAIF,QAASA,GAArB,YAcJ,CAACJ,aAAWW,gBAXK,SAAC,GAAD,EAAER,SAAF,IAAYC,EAAZ,EAAYA,QAAZ,OAEjB,4BAAI,uBAAGE,KAAK,IAAIF,QAASA,GAArB,WAaOQ,EADYC,mCAAyB,CAACd,sBAAqBe,iBA3CjD,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACrB,wBAAIV,UAAU,gCAAgCU,MC4EnCC,E,kDA3EX,WAAYC,EAAOC,GAAU,IAAD,8BACxB,cAAMD,EAAOC,IAERC,MAAQ,CACTC,WAAW,GAGf,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBATE,E,mDAaxBG,KAAKC,SAAS,CAACN,WAAW,M,8BAI1BK,KAAKC,SAAS,CAACN,WAAW,M,uCAI1B,IAAMO,EAAWF,KAAKR,MAAMW,IAG5BC,EAFqBJ,KAAKR,MAAMa,wBAEnBH,GAEbF,KAAKF,U,+BAIL,OAAIE,KAAKR,MAAMc,UAEP,6BACI,uBAAG1B,UAAU,mBACT,2BAAIoB,KAAKR,MAAMe,MACf,0BAAMC,KAAK,SAAS5B,UAAU,oDACxBD,QAASqB,KAAKJ,QAExB,kBAAC,IAAD,CAAOhB,UAAU,kBACV6B,KAAMT,KAAKN,MAAMC,UACjBe,OAAQV,KAAKF,MACba,WAAW,EACXC,OAAO,SAEV,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACrB,kBAAC,IAAMC,MAAP,SAAef,KAAKR,MAAMe,KAA1B,MAGJ,kBAAC,IAAMS,KAAP,KACI,kBAAC,IAAD,CAAOC,QAAQ,WACX,4BAAI,+GAEJ,+GAIR,kBAAC,IAAMC,OAAP,KACI,kBAAC,IAAD,CAAQvC,QAASqB,KAAKF,OAAtB,UACA,kBAAC,IAAD,CAAQnB,QAASqB,KAAKD,eAAgBkB,QAAQ,WAA9C,aAOZ,6BACI,uBAAGrC,UAAU,mBACT,2BAAIoB,KAAKR,MAAMe,Y,GArEdY,IAAMC,W,oCCoHhBC,E,kDAhHX,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IAeV8B,eAAiB,SAAC7C,GACd,IAAM8C,EAAkB9C,EAAM+C,cAC9B,OAAO,EAAKhC,MAAMiC,QAAQC,QAAO,SAACC,GAC9B,OAAOA,EAAOpB,KAAKiB,cAAcI,WAAWL,IACxCI,EAAOxB,GAAGqB,cAAcI,WAAWL,OApB5B,EAwBnBM,iBAAmB,SAACC,EAAD,GAAwC,EAA1BC,MAA0B,EAAnBC,cACpC,OACI,8BAAOF,EAAWvB,OA1BP,EA8BnB0B,SAAW,SAACC,EAAD,GAAwB,IAAfC,EAAc,EAAdA,SAChB,EAAKlC,SAAS,CACVxB,MAAO0D,KAhCI,EA4CnBC,UAAY,WACR,IAAIlC,EAAW,GACX,EAAKR,MAAM2C,eAAe9B,KAAKiB,gBAAkB,EAAK9B,MAAMjB,MAAM+C,gBAClEtB,EAAW,EAAKR,MAAM2C,eAAelC,KAGzCmC,EADwB,EAAK9C,MAAM8C,iBACnBpC,GAChB,EAAKD,SAAS,CACVxB,MAAO,GACP4D,eAAgB,CACZlC,GAAI,GACJI,KAAM,IAEVE,MAAM,KAzDK,EA6DnB8B,mBAAqB,SAACT,GAIlB,OAHA,EAAK7B,SAAS,CACVoC,eAAgBP,IAEbA,EAAWvB,MA9DlB,EAAKb,MAAQ,CACT8C,YAAa,GACb/D,MAAO,GACP4D,eAAgB,CACZlC,GAAI,GACJI,KAAM,IAEVE,MAAM,GAEV,EAAKb,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBAbE,E,mDAqCfG,KAAKC,SAAS,CAACQ,MAAM,M,8BAIrBT,KAAKC,SAAS,CAACQ,MAAM,M,+BA2Bf,IAAD,OACCgC,EAAa,CACfC,YAAa,kCACbjE,MAAOuB,KAAKN,MAAMjB,MAClBwD,SAAUjC,KAAKiC,UAGnB,OAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKU,GAAI3C,KAAKR,MAAMoD,SAChB,kBAAC,IAAD,CACIJ,YAAaxC,KAAKN,MAAM8C,YACxBK,4BAA6B,gBAAEpE,EAAF,EAAEA,MAAF,OAAa,EAAKwB,SAAS,CAACuC,YAAa,EAAKlB,eAAe7C,MAC1FqE,4BAA6B,kBAAM,EAAK7C,SAAS,CAACuC,YAAa,MAC/DD,mBAAoBvC,KAAKuC,mBACzBV,iBAAkB7B,KAAK6B,iBACvBY,WAAYA,KAGpB,kBAAC,IAAD,CAAKE,GAAI3C,KAAKR,MAAMuD,UAChB,4BAAQpE,QAASqB,KAAKJ,KAAMhB,UAAU,kBAAkBoE,UAAWhD,KAAKN,MAAMjB,OACzEuB,KAAKR,MAAMyD,gBAGpB,kBAAC,IAAD,CACIC,SAAO,EACPC,YAAU,EACVC,eAAgB,OAChBC,kBAAmB,UACnBC,iBAAkB,SAClB7C,KAAMT,KAAKN,MAAMe,KACjB8C,MAAOvD,KAAKR,MAAMgE,WAClBpB,UAAWpC,KAAKoC,UAChBqB,SAAUzD,KAAKF,OAEdE,KAAKR,MAAMkE,WAEhB,kBAAC,IAAD,CAAKC,SAAU,S,GA3GCxC,IAAMC,WCoCvBwC,E,kDAtCX,WAAYpE,GAAQ,IAAD,8BACf,cAAMA,IACDqE,MAAQ,EACb,EAAKC,qBAAuB,EAAKA,qBAAqBjE,KAA1B,gBAC5B,EAAKkE,mBAAqB,EAAKA,mBAAmBlE,KAAxB,gBAJX,E,iEAQfmE,aAAahE,KAAK6D,QAElBI,EADqBjE,KAAKR,MAAM0E,iBACnB,GAEblE,KAAKmE,gB,6CAILnE,KAAK6D,MAAQO,WAAWpE,KAAKR,MAAM6E,0BAA2B,O,+BAI9D,OAAIrE,KAAKR,MAAM8E,WACXN,aAAahE,KAAK6D,OAClB7D,KAAK8D,uBAED,kBAAC,IAAD,CAAO7C,QAASjB,KAAKR,MAAM+E,WAAYC,UAAWxE,KAAK+D,oBACnD,4BAAK/D,KAAKR,MAAMiF,YAChB,2BAAIzE,KAAKR,MAAMkF,WAKnB,gC,GAhCUvD,IAAMC,WCwHjBuD,E,4MAhHXC,iBAAmB,WACf,IAAInD,EAAU,EAAKjC,MAAMiC,QAAQoD,KAAI,SAAClD,EAAQmD,GAC1C,IAAMC,EAAO,EAAKvF,MAAMuF,KAClBC,EAAQ,EAAKxF,MAAMwF,MAGzB,GAF+BF,IAAOC,EAAO,GAAKC,GAAUF,EAAKC,EAAOC,EAGpE,OACI,kBAAC,EAAD,CACIzE,KAAMoB,EAAOpB,KACbD,UAAWqB,EAAOsD,aAClB9E,GAAIwB,EAAOxB,GACX+E,IAAKJ,EACLzE,uBAAwB,EAAKb,MAAMa,4BASnD,OAHKoB,EAAQ0D,SACT1D,EAAU,kCAEPA,G,EAGX2D,0BAA4B,WACxB,IAAIC,EAAmB,EAAK7F,MAAM6F,iBAAiBR,KAAI,SAAClD,EAAQmD,GAC5D,IAAMC,EAAO,EAAKvF,MAAM8F,qBAClBN,EAAQ,EAAKxF,MAAMwF,MAGzB,GAF+BF,IAAOC,EAAO,GAAKC,GAAUF,EAAKC,EAAOC,EAGpE,OACI,kBAAC,EAAD,CACIzE,KAAMoB,EAAOpB,KACbD,WAAW,EACXH,GAAIwB,EAAOxB,GACX+E,IAAKJ,EACLzE,uBAAwB,EAAKb,MAAMa,4BASnD,OAHKgF,EAAiBF,SAClBE,EAAmB,kCAEhBA,G,uDAKP,OACI,6BACI,kBAAC,EAAD,CAAaX,QAAS1E,KAAKR,MAAM+F,UAAUC,KAAKd,QACnCJ,UAAWtE,KAAKR,MAAM+F,UAAUE,eAChCvB,eAAgBlE,KAAKR,MAAMkG,4BAC3BnB,WAAYvE,KAAKR,MAAM+F,UAAUhB,WACjCE,WAAYzE,KAAKR,MAAM+F,UAAUd,WACjCJ,0BAA2BrE,KAAKR,MAAM6E,4BAEnD,kBAAC,IAAD,CAAMzD,OAAO,SACT,+DACA,kBAAC,EAAD,CACIa,QAASzB,KAAKR,MAAM6F,iBACpB7B,WAAY,wDACZE,UAAW,mFACXpB,gBAAiBtC,KAAKR,MAAMmG,kBAC5B1C,cAAe,qBACfL,QAAS,EACTG,SAAU,KAIlB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKJ,GAAI,GACL,iFAEI,6BACA,wFAGJ,yBAAK/D,UAAU,cAAcoB,KAAK4E,oBAElC,kBAAC,EAAD,CACIgB,YAAa5F,KAAKR,MAAMuF,KACxBc,WAAY7F,KAAKR,MAAMqG,WACvB5D,SAAUjC,KAAKR,MAAMsG,wBAG7B,kBAAC,IAAD,CAAKnD,GAAI,GACL,+FAEI,6BACA,iHAGJ,yBAAK/D,UAAU,cAAcoB,KAAKoF,6BAElC,kBAAC,EAAD,CACIQ,YAAa5F,KAAKR,MAAM8F,qBACxBO,WAAY7F,KAAKR,MAAMuG,0BACvB9D,SAAUjC,KAAKR,MAAMwG,6C,GAxGpB7E,IAAMC,WCiGpB6E,E,kDArGX,WAAYzG,EAAOC,GAAU,IAAD,8BACxB,cAAMD,EAAOC,IAERC,MAAQ,CACTC,WAAW,GAGf,EAAKhB,QAAU,EAAKA,QAAQkB,KAAb,gBACf,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKD,KAAO,EAAKA,KAAKC,KAAV,gBATY,E,mDAaxBG,KAAKC,SAAS,CAACN,WAAW,M,8BAI1BK,KAAKC,SAAS,CAACN,WAAW,M,8BAGtBO,GACJ,IAAMgG,EAASlG,KAAKR,MAAM2G,UAAUC,QAC9BC,EAASrG,KAAKR,MAAM2G,UAAUG,WAGpCC,EAFwBvG,KAAKR,MAAMgH,yBAEnBtG,EAAUgG,EAAQG,GAClCrG,KAAKF,U,+BAIL,OACI,6BACI,4BAAQlB,UAAU,kBAAkBD,QAASqB,KAAKJ,MAC9C,2BAAII,KAAKR,MAAM2G,UAAUM,YAAc,MAAQzG,KAAKR,MAAM2G,UAAUO,WACpE,6BAEC1G,KAAKR,MAAM2G,UAAUQ,KAAKC,KAAK,OAEpC,kBAAC,IAAD,CAAOhI,UAAU,kBACV6B,KAAMT,KAAKN,MAAMC,UACjBe,OAAQV,KAAKF,MACba,WAAW,EACXC,OAAO,SACV,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACrB,kBAAC,IAAMC,MAAP,CAAa8F,eAAe,KACfC,QAAQ,mBADrB,IACyC9G,KAAKR,MAAM2G,UAAUO,UAD9D,MAGJ,kBAAC,IAAM1F,KAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK2B,GAAI,GACL,wCAEJ,kBAAC,IAAD,CAAKA,GAAI,IACL,kBAAC,IAAD,CAAM/B,OAAO,SAASZ,KAAKR,MAAM2G,UAAUM,eAGnD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK9D,GAAI,GACL,wCAEJ,kBAAC,IAAD,CAAKA,GAAI,IACL,kBAAC,IAAD,CAAM/B,OAAO,SAASZ,KAAKR,MAAM2G,UAAUY,eAGnD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKpE,GAAI,GACL,yCAEJ,kBAAC,IAAD,CAAKA,GAAI,IACL,kBAAC,IAAD,CAAM/B,OAAO,QACPoG,wBAAyB,CAACC,OAAQjH,KAAKR,MAAM2G,UAAUe,kBAIrE,kBAAC,IAAD,CAAMtG,OAAO,SACT,yDACA,kBAAC,EAAD,CACIuF,UAAWnG,KAAKR,MAAM2G,UACtB1E,QAASzB,KAAKR,MAAMiC,QACpB+B,WACI,gCAAkCxD,KAAKR,MAAM2G,UAAUO,UACvD,4BAEJhD,UAAW,GACXT,cAAe,YACfX,gBAAiBtC,KAAKrB,QACtBiE,QAAS,EACTG,SAAU,MAKtB,kBAAC,IAAM7B,OAAP,KACI,kBAAC,IAAD,CAAQvC,QAASqB,KAAKF,OAAtB,gB,GA9FLqB,IAAMC,WCmGV+F,E,kDAhGX,WAAY3H,GAAQ,IAAD,8BACf,cAAMA,IA6BV4H,aAAe,SAACrC,GACZsC,QAAQC,IAAI,EAAK5H,MAAMqC,OACE,KAArB,EAAKrC,MAAMqC,MACX,EAAKvC,MAAM+H,oBAAoBxC,GAE/B,EAAKvF,MAAMgI,4BAA4B,EAAK9H,MAAMqC,MAAOgD,IAnC9C,EAuCnBwB,gBAAkB,SAACrG,EAAUgG,EAAQG,GACjC,EAAK7G,MAAMgH,wBAAwBtG,EAAUgG,EAAQG,EAAQ,EAAK3G,MAAMqC,QAxCzD,EA2CnB0F,eAAiB,WACb,IAAIC,EAAQ,EAAKlI,MAAMkI,MAAM7C,KAAI,SAAC8C,EAAM7C,GACpC,OAAQ,kBAAC,EAAD,CACJqB,UAAWwB,EACXzC,IAAKJ,EACLrD,QAAS,EAAKjC,MAAMiC,QACpB+E,wBAAyB,EAAKD,qBAOtC,OAHKmB,EAAMvC,SACPuC,EAAQ,iCAELA,GArDP,EAAKhI,MAAQ,CACTqC,MAAO,GACP8B,MAAO,GAGX,EAAK+D,aAAe,EAAKA,aAAa/H,KAAlB,gBARL,E,yDAWNgI,GACT,IAAMC,EAAgBD,EAAEE,OAAOtJ,MACzBuJ,EAAsBhI,KAAKR,MAAMgI,4BAEvCxD,aAAahE,KAAKN,MAAMmE,OACF,KAAlBiE,GACA9H,KAAKR,MAAM+H,sBACXvH,KAAKC,SAAS,CACV8B,MAAO+F,EACPjE,MAAO,KAGX7D,KAAKC,SAAS,CACV8B,MAAO+F,EACPjE,MAAOO,YAAW,kBAAM4D,EAAoBF,KAAgB,S,+BAoCpE,OACI,6BACI,kBAAC,EAAD,CAAapD,QAAS1E,KAAKR,MAAM+F,UAAUC,KAAKd,QACnCJ,UAAWtE,KAAKR,MAAM+F,UAAUE,eAChCvB,eAAgBlE,KAAKR,MAAMkG,4BAC3BnB,WAAYvE,KAAKR,MAAM+F,UAAUhB,WACjCE,WAAYzE,KAAKR,MAAM+F,UAAUd,WACjCJ,0BAA2BrE,KAAKR,MAAM6E,4BAGnD,0BAAMzF,UAAU,uBACZ,6CACA,kBAAC,IAAD,CACIqJ,KAAK,OACLxJ,MAAOuB,KAAKR,MAAMuC,MAClBW,YAAY,+CACZT,SAAUjC,KAAK4H,gBAIvB,+EAEA,yBAAKhJ,UAAU,cAAcoB,KAAKyH,kBAElC,kBAAC,EAAD,CACI7B,YAAa5F,KAAKR,MAAMuF,KACxBc,WAAY7F,KAAKR,MAAMqG,WACvB5D,SAAUjC,KAAKoH,oB,GAzFZjG,IAAMC,WCwTd8G,E,kDArTX,WAAY1I,GAAQ,IAAD,8BACf,cAAMA,IAEDE,MAAQ,CACTgI,MAAO,GACPjG,QAAS,GACT4D,iBAAkB,GAClB8C,uBAAwB,GACxBC,UAAW,EACXC,YAAa,EACb/C,qBAAsB,EACtBgD,gBAAiB,EACjBC,kBAAmB,EACnBC,2BAA4B,EAC5BC,oBAAqB,CACjBjD,KAAM,CAAC,QAAW,IAClBC,gBAAgB,EAChBhB,WAAY,GACZF,WAAY,IAEhBmE,kBAAmB,CACflD,KAAM,CAAC,QAAW,IAClBC,gBAAgB,EAChBhB,WAAY,GACZF,WAAY,KAGpB,EAAKoE,WAAa,GAClB,EAAK3D,MAAQ,GAEb,EAAK4D,mBAAqB,EAAKA,mBAAmB/I,KAAxB,gBAC1B,EAAK0G,gBAAkB,EAAKA,gBAAgB1G,KAArB,gBAEvB,EAAKgJ,uBAAyB,EAAKA,uBAAuBhJ,KAA5B,gBAC9B,EAAKiJ,iBAAmB,EAAKA,iBAAiBjJ,KAAtB,gBACxB,EAAKkJ,4BAA8B,EAAKA,4BAA4BlJ,KAAjC,gBACnC,EAAKmJ,kCAAoC,EAAKA,kCAAkCnJ,KAAvC,gBAEzC,EAAKO,aAAe,EAAKA,aAAaP,KAAlB,gBACpB,EAAKoJ,yBAA2B,EAAKA,yBAAyBpJ,KAA9B,gBAChC,EAAKqJ,UAAY,EAAKA,UAAUrJ,KAAf,gBAEjB,EAAKsJ,qBAAuB,EAAKA,qBAAqBtJ,KAA1B,gBAC5B,EAAKuJ,uBAAyB,EAAKA,uBAAuBvJ,KAA5B,gBAC9B,EAAKwJ,4BAA8B,EAAKA,4BAA4BxJ,KAAjC,gBACnC,EAAKyJ,0BAA4B,EAAKA,0BAA0BzJ,KAA/B,gBAEjC,EAAK0J,4BAA8B,EAAKA,4BAA4B1J,KAAjC,gBA/CpB,E,qEAkDO,IAAD,OACrB2J,EAAEC,QAAQ,2CAA2CC,MAAK,SAACjI,GACvD,IAAMkI,EAAalI,EACfoE,EAAa+D,KAAKC,KAAKF,EAAWxE,OAAS,EAAKH,OACjC,IAAfa,IACAA,EAAa,GAEjB,EAAK5F,SAAS,CACVsI,kBAAmB1C,EACnBwC,YAAa,EACb5G,QAASkI,S,yCAKO,IAAD,OAAV5E,EAAU,uDAAH,EACd+E,EAAG,sDAAkD9J,KAAKgF,MAAvD,iBAAqED,GAC9EyE,EAAEC,QAAQK,GAAKJ,MAAK,SAACK,GACjB,IAAMC,EAAgBD,EAAQ,YAC9B,EAAK9J,SAAS,CACVqI,gBAAiB0B,EACjB5B,UAAWrD,EACX2C,MAAOqC,EAAQ,a,oDAKI,IAAD,OAC1BP,EAAEC,QAAQ,gDAAgDC,MAAK,SAACrE,GAC5D,IAAMsE,EAAatE,EACf2E,EAAgBJ,KAAKC,KAAKF,EAAWxE,OAAS,EAAKH,OACjC,IAAlBgF,IACAA,EAAgB,GAEpB,EAAK/J,SAAS,CACVuI,2BAA4BwB,EAC5B1E,qBAAsB,EACtBD,iBAAkBA,S,0DAKO,IAAD,OAChCmE,EAAEC,QAAQ,wDAAwDC,MAAK,SAACvB,GACpE,EAAKlI,SAAS,CACVkI,uBAAwBA,S,mCAKvB7B,GAAY,IAAD,OACpBkD,EAAES,KAAK,CACHH,IAAK,2CAA6CN,EAAEU,MAAM,CAAC,UAAa5D,IACxE2B,KAAM,SACNkC,QAAS,SAAC3E,GACN,EAAKqD,yBACL,EAAKE,8BACe,KAApB,EAAKJ,WAAoB,EAAKG,mBAAqB,EAAKG,yBAAyB,EAAKN,eAE3FyB,MAAK,SAAC5E,GACL,EAAKvF,SAAS,CACVwI,oBAAqB,CACjBjD,KAAMA,EACNC,gBAAgB,EAChBhB,WAAY,WACZF,WAAY,gBAGrB8F,OAAM,SAAC7E,GACN,EAAKvF,SAAS,CACVwI,oBAAqB,CACjBhD,gBAAgB,EAChBD,KAAM,CAAC,QAAWA,EAAI,aAAJ,OAClBf,WAAY,SACZF,WAAY,iB,+CAMHxC,GAAkB,IAAD,OAAVgD,EAAU,uDAAH,EAC7BS,EAAO,CACT,WAAczD,EACd,MAAS/B,KAAKgF,MACd,KAAQD,GAEZ/E,KAAK2I,WAAa5G,EAClByH,EAAEc,KAAK,+CAAgD9E,GAAM,SAACuE,GAC1D,IAAMlE,EAAakE,EAAQ,YACrBQ,EAAgBR,EAAQ,MAE9B,EAAK9J,SAAS,CACVyH,MAAO6C,EACPnC,UAAWrD,EACXuD,gBAAiBzC,S,gCAKnB3F,GAAW,IAAD,OAEhBsJ,EAAEc,KAAK,0CAA2C,CAAC,UAAapK,IAAW,SAACsF,GACxE,EAAKqD,yBACL,EAAKE,8BACe,KAApB,EAAKJ,WAAoB,EAAKG,mBAAqB,EAAKG,yBAAyB,EAAKN,eACvFyB,MAAK,SAAC5E,GACL,EAAKvF,SAAS,CACVwI,oBAAqB,CACjBjD,KAAMA,EACNC,gBAAgB,EAChBhB,WAAY,WACZF,WAAY,gBAGrB8F,OAAM,SAAC7E,GACN,EAAKvF,SAAS,CACVwI,oBAAqB,CACjBhD,gBAAgB,EAChBD,KAAM,CAAC,QAAWA,EAAI,aAAJ,OAClBf,WAAY,SACZF,WAAY,iB,2CAMPD,GACjBtE,KAAKC,SAAS,CACVyI,kBAAmB,CACfjD,eAAgBnB,EAChBkB,KAAM,CAAC,QAAW,IAClBf,WAAY,GACZF,WAAY,Q,6CAKDD,GACnBtE,KAAKC,SAAS,CACVwI,oBAAqB,CACjBhD,eAAgBnB,EAChBkB,KAAM,CAAC,QAAW,IAClBf,WAAY,GACZF,WAAY,Q,sCAKRiG,EAAUtE,EAAQG,EAAQtE,GAAQ,IAAD,OACvC0I,EAAe,CACjB,UAAaD,EACb,QAAWtE,EACX,QAAWG,GAEfmD,EAAEc,KAAK,uCAAwCG,GAAc,SAACjF,GAC5C,KAAVzD,EAAc,EAAK+G,mBAClB,EAAKG,yBAAyBlH,MACpCqI,MAAK,SAAC5E,GACL,EAAKvF,SAAS,CACVyI,kBAAmB,CACflD,KAAMA,EACNC,gBAAgB,EAChBhB,WAAY,WACZF,WAAY,gBAGrB8F,OAAM,SAAC7E,GACN,EAAKvF,SAAS,CACVyI,kBAAmB,CACfjD,gBAAgB,EAChBD,KAAM,CAAC,QAAWA,EAAI,aAAJ,OAClBf,WAAY,SACZF,WAAY,iB,oDAOxBvE,KAAKC,SAAS,CACVwI,oBAAqB,CACjBjD,KAAM,CAAC,QAAW,IAClBC,gBAAgB,EAChBhB,WAAY,GACZF,WAAY,Q,kDAMpBvE,KAAKC,SAAS,CACVyI,kBAAmB,CACflD,KAAM,CAAC,QAAW,IAClBC,gBAAgB,EAChBhB,WAAY,GACZF,WAAY,Q,yCAKLQ,GACf/E,KAAKC,SAAS,CAACoI,YAAatD,M,kDAGJA,GACxB/E,KAAKC,SAAS,CAACqF,qBAAsBP,M,2CAIrC/E,KAAK6I,yBACL7I,KAAK+I,8BACL/I,KAAKgJ,oCACLhJ,KAAK8I,qB,+BAIL,OACI,kBAAC,IAAD,CAAM4B,iBAAkB,EAAGvK,GAAG,kBAC1B,kBAAC,IAAD,CAAKwK,SAAU,EAAGpH,MAAM,WACpB,kBAAC,EAAD,CACIyB,MAAOhF,KAAKgF,MACZvD,QAASzB,KAAKN,MAAM+B,QACpB4D,iBAAkBrF,KAAKN,MAAM2F,iBAC7BN,KAAM/E,KAAKN,MAAM2I,YACjBxC,WAAY7F,KAAKN,MAAM6I,kBACvBjD,qBAAsBtF,KAAKN,MAAM4F,qBACjCS,0BAA2B/F,KAAKN,MAAM8I,2BACtCjD,UAAWvF,KAAKN,MAAM+I,oBACtB/C,4BAA6B1F,KAAKoJ,uBAClCwB,mBAAoB5K,KAAK8I,iBACzB+B,mBAAoB7K,KAAK6I,uBACzBiC,wBAAyB9K,KAAK+I,4BAC9BjD,qBAAsB9F,KAAK4I,mBAC3B5C,oCAAqChG,KAAKuJ,4BAC1ClJ,uBAAwBL,KAAKI,aAC7BuF,kBAAmB3F,KAAKkJ,UACxB7E,0BAA2BrE,KAAKqJ,+BAGxC,kBAAC,IAAD,CAAKsB,SAAU,EAAGpH,MAAM,SACpB,kBAAC,EAAD,CACImE,MAAO1H,KAAKN,MAAMgI,MAClB1C,MAAOhF,KAAKgF,MACZD,KAAM/E,KAAKN,MAAM0I,UACjBvC,WAAY7F,KAAKN,MAAM4I,gBACvB7G,QAASzB,KAAKN,MAAMyI,uBACpB5C,UAAWvF,KAAKN,MAAMgJ,kBACtBhD,4BAA6B1F,KAAKmJ,qBAClC5B,oBAAqBvH,KAAK8I,iBAC1BtB,4BAA6BxH,KAAKiJ,yBAClCzC,wBAAyBxG,KAAKuG,gBAC9BlC,0BAA2BrE,KAAKsJ,kC,GA/SjCnI,IAAMC,WCD7B2J,IAASC,OACJ,kBAAC,EAAD,MACDC,SAASC,eAAe,e","file":"static/js/main.14b1f504.chunk.js","sourcesContent":["import React from 'react';\nimport {createUltimatePagination, ITEM_TYPES} from 'react-ultimate-pagination';\n\nconst WrapperComponent = ({children}) => (\n    <ul className=\"pagination custom-pagination\">{children}</ul>\n);\n\nconst Page = ({value, isActive, onClick}) => (\n    // eslint-disable-next-line\n    <li className={isActive ? 'active' : null}><a href=\"#\" onClick={onClick}>{value}</a></li>\n);\n\nconst Ellipsis = ({onClick}) => (\n    // eslint-disable-next-line\n    <li><a href=\"#\" onClick={onClick}>...</a></li>\n);\n\nconst FirstPageLink = ({isActive, onClick}) => (\n    // eslint-disable-next-line\n    <li><a href=\"#\" onClick={onClick}>&laquo;</a></li>\n);\n\nconst PreviousPageLink = ({isActive, onClick}) => (\n    // eslint-disable-next-line\n    <li><a href=\"#\" onClick={onClick}>&lsaquo;</a></li>\n);\n\nconst NextPageLink = ({isActive, onClick}) => (\n    // eslint-disable-next-line\n    <li><a href=\"#\" onClick={onClick}>&rsaquo;</a></li>\n);\n\nconst LastPageLink = ({isActive, onClick}) => (\n    // eslint-disable-next-line\n    <li><a href=\"#\" onClick={onClick}>&raquo;</a></li>\n);\n\nconst itemTypeToComponent = {\n    [ITEM_TYPES.PAGE]: Page,\n    [ITEM_TYPES.ELLIPSIS]: Ellipsis,\n    [ITEM_TYPES.FIRST_PAGE_LINK]: FirstPageLink,\n    [ITEM_TYPES.PREVIOUS_PAGE_LINK]: PreviousPageLink,\n    [ITEM_TYPES.NEXT_PAGE_LINK]: NextPageLink,\n    [ITEM_TYPES.LAST_PAGE_LINK]: LastPageLink\n};\n\nconst UltimatePagination = createUltimatePagination({itemTypeToComponent, WrapperComponent});\nexport default UltimatePagination;","import React from \"react\";\nimport {Modal, Button, Alert} from 'react-bootstrap';\n\nclass BankCourse extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            showModal: false\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onDeleteCourse = this.onDeleteCourse.bind(this);\n    }\n\n    open() {\n        this.setState({showModal: true});\n    };\n\n    close() {\n        this.setState({showModal: false});\n    };\n\n    onDeleteCourse() {\n        const courseId = this.props.id;\n        const deleteCourse = this.props.callbackOnDeleteCourse;\n\n        deleteCourse(courseId);\n\n        this.close();\n    };\n\n    render() {\n        if (this.props.removable) {\n            return (\n                <div>\n                    <a className=\"list-group-item\">\n                        <b>{this.props.name}</b>\n                        <span role=\"button\" className=\"glyphicon glyphicon-remove pull-right text-danger\"\n                              onClick={this.open}/>\n                    </a>\n                    <Modal className=\"modal-container\"\n                           show={this.state.showModal}\n                           onHide={this.close}\n                           animation={true}\n                           bsSize=\"large\">\n\n                        <Modal.Header closeButton>\n                            <Modal.Title> {this.props.name} </Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <Alert bsStyle=\"warning\">\n                                <h5><strong>Are you sure that you want to remove the bank privileges from this\n                                    course?</strong></h5>\n                                <h6>* The course won't be removed, only the permits to be a bank will be removed.</h6>\n                            </Alert>\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button onClick={this.close}>Cancel</Button>\n                            <Button onClick={this.onDeleteCourse} bsStyle=\"primary\">Remove</Button>\n                        </Modal.Footer>\n                    </Modal>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <a className=\"list-group-item\">\n                        <b>{this.props.name}</b>\n                    </a>\n                </div>\n            );\n        }\n    }\n}\n\nexport default BankCourse;","import React from \"react\";\nimport Autosuggest from 'react-autosuggest';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport {Row, Col} from 'react-bootstrap';\nimport './index.css';\n\nclass CourseAutosuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            suggestions: [],\n            value: '',\n            selectedCourse: {\n                id: '',\n                name: ''\n            },\n            show: false,\n        };\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n    }\n\n    getSuggestions = (value) => {\n        const normalizedValue = value.toUpperCase();\n        return this.props.courses.filter((course) => {\n            return course.name.toUpperCase().startsWith(normalizedValue) ||\n                course.id.toUpperCase().startsWith(normalizedValue);\n        });\n    };\n\n    renderSuggestion = (suggestion, {query, isHighlighted}) => {\n        return (\n            <span>{suggestion.name}</span>\n        );\n    };\n\n    onChange = (event, {newValue}) => {\n        this.setState({\n            value: newValue\n        });\n    };\n\n    open() {\n        this.setState({show: true});\n    };\n\n    close() {\n        this.setState({show: false});\n    };\n\n    onConfirm = () => {\n        let courseId = \"\";\n        if (this.state.selectedCourse.name.toUpperCase() === this.state.value.toUpperCase()) {\n            courseId = this.state.selectedCourse.id;\n        }\n        const callbackOnClick = this.props.callbackOnClick;\n        callbackOnClick(courseId);\n        this.setState({\n            value: '',\n            selectedCourse: {\n                id: '',\n                name: ''\n            },\n            show: false\n        });\n    };\n\n    getSuggestionValue = (suggestion) => {\n        this.setState({\n            selectedCourse: suggestion\n        });\n        return suggestion.name\n    };\n\n    render() {\n        const inputProps = {\n            placeholder: 'Type a course name or course id',\n            value: this.state.value,\n            onChange: this.onChange\n        };\n\n        return (\n\n            <Row>\n                <Col md={this.props.mdInput}>\n                    <Autosuggest\n                        suggestions={this.state.suggestions}\n                        onSuggestionsFetchRequested={({value}) => this.setState({suggestions: this.getSuggestions(value)})}\n                        onSuggestionsClearRequested={() => this.setState({suggestions: []})}\n                        getSuggestionValue={this.getSuggestionValue}\n                        renderSuggestion={this.renderSuggestion}\n                        inputProps={inputProps}\n                    />\n                </Col>\n                <Col md={this.props.mdButton}>\n                    <button onClick={this.open} className=\"btn btn-primary\" disabled={!this.state.value}>\n                        {this.props.messageButton}\n                    </button>\n                </Col>\n                <SweetAlert\n                    warning\n                    showCancel\n                    confirmBtnText={\"Yes!\"}\n                    confirmBtnBsStyle={\"warning\"}\n                    cancelBtnBsStyle={\"danger\"}\n                    show={this.state.show}\n                    title={this.props.alertTitle}\n                    onConfirm={this.onConfirm}\n                    onCancel={this.close}\n                >\n                    {this.props.alertText}\n                </SweetAlert>\n                <Col mdHidden={6}/>\n            </Row>\n        );\n    }\n}\n\nexport default CourseAutosuggest;\n","import React from \"react\";\nimport {Alert} from 'react-bootstrap';\n\nclass CustomAlert extends React.Component {\n    constructor(props) {\n        super(props);\n        this.timer = 0;\n        this.handleDelayedDismiss = this.handleDelayedDismiss.bind(this);\n        this.handleAlertDismiss = this.handleAlertDismiss.bind(this);\n    }\n\n    handleAlertDismiss() {\n        clearTimeout(this.timer);\n        const updateParent = this.props.callbackParent;\n        updateParent(false);\n\n        this.forceUpdate();\n    }\n\n    handleDelayedDismiss() {\n        this.timer = setTimeout(this.props.callbackSetAlertInvisible, 10000)\n    }\n\n    render() {\n        if (this.props.isVisible) {\n            clearTimeout(this.timer);\n            this.handleDelayedDismiss();\n            return (\n                <Alert bsStyle={this.props.styleAlert} onDismiss={this.handleAlertDismiss}>\n                    <h4>{this.props.titleAlert}</h4>\n                    <p>{this.props.message}</p>\n                </Alert>\n            );\n        } else {\n            return (\n                <p>\n                </p>\n            );\n        }\n    }\n}\n\nexport default CustomAlert;","import React from \"react\";\nimport {Well, Row, Col} from 'react-bootstrap';\nimport './index.css';\n\nimport UltimatePagination from './ultimate_pagination';\nimport BankCourse from './bank_course'\nimport CourseAutosuggest from './course_autosuggest'\nimport CustomAlert from './custom_alert';\n\nclass BankCourseList extends React.Component {\n\n    getListOfCourses = () => {\n        let courses = this.props.courses.map((course, i) => {\n            const page = this.props.page;\n            const limit = this.props.limit;\n            const courseIsInBoundsOfPage = i >= ((page - 1) * limit) && i < (page * limit);\n\n            if (courseIsInBoundsOfPage) {\n                return (\n                    <BankCourse\n                        name={course.name}\n                        removable={course.is_removable}\n                        id={course.id}\n                        key={i}\n                        callbackOnDeleteCourse={this.props.callbackOnDeleteCourse}\n                    />\n                )\n            }\n        });\n\n        if (!courses.length) {\n            courses = \"There are no available courses\";\n        }\n        return courses;\n    };\n\n    getListOfAvailableCourses = () => {\n        let availableCourses = this.props.availableCourses.map((course, i) => {\n            const page = this.props.pageAvailableCourses;\n            const limit = this.props.limit;\n            const courseIsInBoundsOfPage = i >= ((page - 1) * limit) && i < (page * limit);\n\n            if (courseIsInBoundsOfPage) {\n                return (\n                    <BankCourse\n                        name={course.name}\n                        removable={false}\n                        id={course.id}\n                        key={i}\n                        callbackOnDeleteCourse={this.props.callbackOnDeleteCourse}\n                    />\n                )\n            }\n        });\n\n        if (!availableCourses.length) {\n            availableCourses = \"There are no available courses\";\n        }\n        return availableCourses;\n    };\n\n    render() {\n\n        return (\n            <div>\n                <CustomAlert message={this.props.dataAlert.data.message}\n                             isVisible={this.props.dataAlert.isVisibleAlert}\n                             callbackParent={this.props.callbackOnChildChangedClose}\n                             styleAlert={this.props.dataAlert.styleAlert}\n                             titleAlert={this.props.dataAlert.titleAlert}\n                             callbackSetAlertInvisible={this.props.callbackSetAlertInvisible}\n                />\n                <Well bsSize=\"small\">\n                    <h5>Select course to become in bank</h5>\n                    <CourseAutosuggest\n                        courses={this.props.availableCourses}\n                        alertTitle={\"Are you sure you want to add this course to the bank?\"}\n                        alertText={\"* The course and tasks from this course will be public and every user could copy\"}\n                        callbackOnClick={this.props.callbackAddCourse}\n                        messageButton={\"Add course to bank\"}\n                        mdInput={4}\n                        mdButton={2}\n                    />\n                </Well>\n\n                <Row>\n                    <Col md={6}>\n                        <div>\n                            The following courses are marked as task sources:\n                            <br/>\n                            <small> (You are free to copy the tasks from these courses)</small>\n                        </div>\n\n                        <div className=\"list-group\">{this.getListOfCourses()}</div>\n\n                        <UltimatePagination\n                            currentPage={this.props.page}\n                            totalPages={this.props.totalPages}\n                            onChange={this.props.callbackOnPageChange}\n                        />\n                    </Col>\n                    <Col md={6}>\n                        <div>\n                            The following courses are not marked as bank and you are admin:\n                            <br/>\n                            <small> (You can copy tasks from these courses to other courses which you are admin)</small>\n                        </div>\n\n                        <div className=\"list-group\">{this.getListOfAvailableCourses()}</div>\n\n                        <UltimatePagination\n                            currentPage={this.props.pageAvailableCourses}\n                            totalPages={this.props.totalAvailableCoursePages}\n                            onChange={this.props.callbackOnPageAvailableCourseChange}\n                        />\n                    </Col>\n                </Row>\n            </div>\n\n        );\n    }\n}\n\nexport default BankCourseList;","import React from \"react\";\nimport {Modal, Button, Row, Col, Well} from 'react-bootstrap';\nimport CourseAutosuggest from './course_autosuggest';\n\nclass Task extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            showModal: false\n        };\n\n        this.onClick = this.onClick.bind(this);\n        this.close = this.close.bind(this);\n        this.open = this.open.bind(this);\n    }\n\n    open() {\n        this.setState({showModal: true});\n    };\n\n    close() {\n        this.setState({showModal: false});\n    };\n\n    onClick(courseId) {\n        const taskId = this.props.task_info.task_id;\n        const bankId = this.props.task_info.course_id;\n        const addTaskToCourse = this.props.callBackAddTaskToCourse;\n\n        addTaskToCourse(courseId, taskId, bankId);\n        this.close();\n    }\n\n    render() {\n        return (\n            <div>\n                <button className=\"list-group-item\" onClick={this.open}>\n                    <b>{this.props.task_info.course_name + \" - \" + this.props.task_info.task_name}</b>\n                    <br/>\n\n                    {this.props.task_info.tags.join(', ')}\n                </button>\n                <Modal className=\"modal-container\"\n                       show={this.state.showModal}\n                       onHide={this.close}\n                       animation={true}\n                       bsSize=\"large\">\n                    <Modal.Header closeButton>\n                        <Modal.Title componentClass=\"h3\"\n                                     bsClass=\"new-modal-title\"> {this.props.task_info.task_name} </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Row>\n                            <Col md={1}>\n                                <h5>Course:</h5>\n                            </Col>\n                            <Col md={11}>\n                                <Well bsSize=\"small\">{this.props.task_info.course_name}</Well>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={1}>\n                                <h5>Author:</h5>\n                            </Col>\n                            <Col md={11}>\n                                <Well bsSize=\"small\">{this.props.task_info.task_author}</Well>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={1}>\n                                <h5>Context:</h5>\n                            </Col>\n                            <Col md={11}>\n                                <Well bsSize=\"small\"\n                                      dangerouslySetInnerHTML={{__html: this.props.task_info.task_context}}></Well>\n                            </Col>\n                        </Row>\n\n                        <Well bsSize=\"small\">\n                            <h5>Select destination course</h5>\n                            <CourseAutosuggest\n                                task_info={this.props.task_info}\n                                courses={this.props.courses}\n                                alertTitle={\n                                    \"Do you want to add the task '\" + this.props.task_info.task_name +\n                                    \"' to the selected course?\"\n                                }\n                                alertText={\"\"}\n                                messageButton={\"Copy task\"}\n                                callbackOnClick={this.onClick}\n                                mdInput={4}\n                                mdButton={4}\n                            />\n                        </Well>\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button onClick={this.close}>Close</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Task;","import React from \"react\";\nimport {FormControl} from 'react-bootstrap';\nimport Task from './task';\nimport CustomAlert from './custom_alert';\nimport UltimatePagination from './ultimate_pagination';\n\nclass TaskList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            query: '',\n            timer: 0,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        const newStateQuery = e.target.value;\n        const updateFilteredTasks = this.props.callbackUpdateFilteredTasks;\n\n        clearTimeout(this.state.timer);\n        if (newStateQuery === \"\") {\n            this.props.callbackUpdateTasks();\n            this.setState({\n                query: newStateQuery,\n                timer: 0\n            });\n        } else {\n            this.setState({\n                query: newStateQuery,\n                timer: setTimeout(() => updateFilteredTasks(newStateQuery), 500)\n            });\n        }\n    };\n\n    onChangePage = (page) => {\n        console.log(this.state.query);\n        if (this.state.query === \"\") {\n            this.props.callbackUpdateTasks(page);\n        } else {\n            this.props.callbackUpdateFilteredTasks(this.state.query, page);\n        }\n    };\n\n    addTaskToCourse = (courseId, taskId, bankId) => {\n        this.props.callBackAddTaskToCourse(courseId, taskId, bankId, this.state.query);\n    };\n\n    getListOfTasks = () => {\n        let tasks = this.props.tasks.map((task, i) => {\n            return (<Task\n                task_info={task}\n                key={i}\n                courses={this.props.courses}\n                callBackAddTaskToCourse={this.addTaskToCourse}\n            />)\n        });\n\n        if (!tasks.length) {\n            tasks = \"There are no tasks available.\";\n        }\n        return tasks\n    };\n\n    render() {\n\n        return (\n            <div>\n                <CustomAlert message={this.props.dataAlert.data.message}\n                             isVisible={this.props.dataAlert.isVisibleAlert}\n                             callbackParent={this.props.callbackOnChildChangedClose}\n                             styleAlert={this.props.dataAlert.styleAlert}\n                             titleAlert={this.props.dataAlert.titleAlert}\n                             callbackSetAlertInvisible={this.props.callbackSetAlertInvisible}\n                />\n\n                <form className=\"custom-search-input\">\n                    <h5>Search tasks:</h5>\n                    <FormControl\n                        type=\"text\"\n                        value={this.props.query}\n                        placeholder=\"Type a course id or name, task name or a tag\"\n                        onChange={this.handleChange}\n                    />\n                </form>\n\n                <div>The following tasks are available for copying:</div>\n\n                <div className=\"list-group\">{this.getListOfTasks()}</div>\n\n                <UltimatePagination\n                    currentPage={this.props.page}\n                    totalPages={this.props.totalPages}\n                    onChange={this.onChangePage}\n                />\n\n            </div>\n        );\n    }\n}\n\nexport default TaskList;","import React from 'react';\nimport {Tabs, Tab} from 'react-bootstrap';\nimport BankCourseList from './bank_course_list';\nimport TaskList from './task_list';\n\n/*global $:false*/\n\nclass BankPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tasks: [],\n            courses: [],\n            availableCourses: [],\n            availableCoursesToCopy: [],\n            pageTasks: 1,\n            pageCourses: 1,\n            pageAvailableCourses: 1,\n            totalPagesTasks: 1,\n            totalPagesCourses: 1,\n            totalPagesAvailableCourses: 1,\n            dataAlertCourseList: {\n                data: {\"message\": \"\"},\n                isVisibleAlert: false,\n                titleAlert: '',\n                styleAlert: ''\n            },\n            dataAlertTaskList: {\n                data: {\"message\": \"\"},\n                isVisibleAlert: false,\n                titleAlert: '',\n                styleAlert: ''\n            }\n        };\n        this.tasksQuery = \"\";\n        this.limit = 10;\n\n        this.onPageCourseChange = this.onPageCourseChange.bind(this);\n        this.addTaskToCourse = this.addTaskToCourse.bind(this);\n\n        this.updateBankCoursesAsync = this.updateBankCoursesAsync.bind(this);\n        this.updateTasksAsync = this.updateTasksAsync.bind(this);\n        this.updateAvailableCoursesAsync = this.updateAvailableCoursesAsync.bind(this);\n        this.updateAvailableCoursesToCopyAsync = this.updateAvailableCoursesToCopyAsync.bind(this);\n\n        this.deleteCourse = this.deleteCourse.bind(this);\n        this.updateFilteredTasksAsync = this.updateFilteredTasksAsync.bind(this);\n        this.addCourse = this.addCourse.bind(this);\n\n        this.onAlertTaskListClose = this.onAlertTaskListClose.bind(this);\n        this.onAlertCourseListClose = this.onAlertCourseListClose.bind(this);\n        this.setAlertCourseListInvisible = this.setAlertCourseListInvisible.bind(this);\n        this.setAlertTaskListInvisible = this.setAlertTaskListInvisible.bind(this);\n\n        this.onPageAvailableCourseChange = this.onPageAvailableCourseChange.bind(this);\n    }\n\n    updateBankCoursesAsync() {\n        $.getJSON(\"/plugins/problems_bank/api/bank_courses\").then((courses) => {\n            const newCourses = courses;\n            let totalPages = Math.ceil(newCourses.length / this.limit);\n            if (totalPages === 0) {\n                totalPages = 1;\n            }\n            this.setState({\n                totalPagesCourses: totalPages,\n                pageCourses: 1,\n                courses: newCourses\n            })\n        });\n    }\n\n    updateTasksAsync(page = 1) {\n        const url = `/plugins/problems_bank/api/bank_tasks?limit=${this.limit}&page=${page}`;\n        $.getJSON(url).then((response) => {\n            const newTotalPages = response['total_pages'];\n            this.setState({\n                totalPagesTasks: newTotalPages,\n                pageTasks: page,\n                tasks: response['tasks'],\n            });\n        });\n    }\n\n    updateAvailableCoursesAsync() {\n        $.getJSON(\"/plugins/problems_bank/api/available_courses\").then((availableCourses) => {\n            const newCourses = availableCourses;\n            let newTotalPages = Math.ceil(newCourses.length / this.limit);\n            if (newTotalPages === 0) {\n                newTotalPages = 1;\n            }\n            this.setState({\n                totalPagesAvailableCourses: newTotalPages,\n                pageAvailableCourses: 1,\n                availableCourses: availableCourses\n            });\n        });\n    }\n\n    updateAvailableCoursesToCopyAsync() {\n        $.getJSON(\"/plugins/problems_bank/api/available_courses_to_copy\").then((availableCoursesToCopy) => {\n            this.setState({\n                availableCoursesToCopy: availableCoursesToCopy\n            });\n        });\n    }\n\n    deleteCourse(course_id) {\n        $.ajax({\n            url: '/plugins/problems_bank/api/bank_courses?' + $.param({\"course_id\": course_id}),\n            type: \"DELETE\",\n            success: (data) => {\n                this.updateBankCoursesAsync();\n                this.updateAvailableCoursesAsync();\n                this.tasksQuery === \"\" ? this.updateTasksAsync() : this.updateFilteredTasksAsync(this.tasksQuery);\n            }\n        }).done((data) => {\n            this.setState({\n                dataAlertCourseList: {\n                    data: data,\n                    isVisibleAlert: true,\n                    titleAlert: \"Success!\",\n                    styleAlert: \"success\"\n                }\n            });\n        }).error((data) => {\n            this.setState({\n                dataAlertCourseList: {\n                    isVisibleAlert: true,\n                    data: {\"message\": data[\"responseJSON\"][\"error\"]},\n                    titleAlert: \"Error!\",\n                    styleAlert: \"danger\"\n                }\n            });\n        });\n    };\n\n    updateFilteredTasksAsync(query, page = 1) {\n        const data = {\n            \"task_query\": query,\n            \"limit\": this.limit,\n            \"page\": page\n        };\n        this.tasksQuery = query;\n        $.post(\"/plugins/problems_bank/api/filter_bank_tasks\", data, (response) => {\n            const totalPages = response['total_pages'];\n            const filteredTasks = response['tasks'];\n\n            this.setState({\n                tasks: filteredTasks,\n                pageTasks: page,\n                totalPagesTasks: totalPages\n            });\n        });\n    }\n\n    addCourse(courseId) {\n\n        $.post(\"/plugins/problems_bank/api/bank_courses\", {\"course_id\": courseId}, (data) => {\n            this.updateBankCoursesAsync();\n            this.updateAvailableCoursesAsync();\n            this.tasksQuery === \"\" ? this.updateTasksAsync() : this.updateFilteredTasksAsync(this.tasksQuery);\n        }).done((data) => {\n            this.setState({\n                dataAlertCourseList: {\n                    data: data,\n                    isVisibleAlert: true,\n                    titleAlert: \"Success!\",\n                    styleAlert: \"success\"\n                }\n            });\n        }).error((data) => {\n            this.setState({\n                dataAlertCourseList: {\n                    isVisibleAlert: true,\n                    data: {\"message\": data[\"responseJSON\"][\"error\"]},\n                    titleAlert: \"Error!\",\n                    styleAlert: \"danger\"\n                }\n            });\n        });\n    }\n\n    onAlertTaskListClose(isVisible) {\n        this.setState({\n            dataAlertTaskList: {\n                isVisibleAlert: isVisible,\n                data: {\"message\": \"\"},\n                titleAlert: '',\n                styleAlert: ''\n            }\n        });\n    }\n\n    onAlertCourseListClose(isVisible) {\n        this.setState({\n            dataAlertCourseList: {\n                isVisibleAlert: isVisible,\n                data: {\"message\": \"\"},\n                titleAlert: '',\n                styleAlert: ''\n            }\n        });\n    }\n\n    addTaskToCourse(targetId, taskId, bankId, query) {\n        const request_data = {\n            \"target_id\": targetId,\n            \"task_id\": taskId,\n            \"bank_id\": bankId\n        };\n        $.post(\"/plugins/problems_bank/api/copy_task\", request_data, (data) => {\n            if (query === \"\") this.updateTasksAsync();\n            else this.updateFilteredTasksAsync(query);\n        }).done((data) => {\n            this.setState({\n                dataAlertTaskList: {\n                    data: data,\n                    isVisibleAlert: true,\n                    titleAlert: \"Success!\",\n                    styleAlert: \"success\"\n                }\n            });\n        }).error((data) => {\n            this.setState({\n                dataAlertTaskList: {\n                    isVisibleAlert: true,\n                    data: {\"message\": data[\"responseJSON\"][\"error\"]},\n                    titleAlert: \"Error!\",\n                    styleAlert: \"danger\"\n                }\n            });\n        });\n    };\n\n    setAlertCourseListInvisible() {\n        this.setState({\n            dataAlertCourseList: {\n                data: {\"message\": \"\"},\n                isVisibleAlert: false,\n                titleAlert: '',\n                styleAlert: ''\n            }\n        });\n    }\n\n    setAlertTaskListInvisible() {\n        this.setState({\n            dataAlertTaskList: {\n                data: {\"message\": \"\"},\n                isVisibleAlert: false,\n                titleAlert: '',\n                styleAlert: ''\n            }\n        });\n    }\n\n    onPageCourseChange(page) {\n        this.setState({pageCourses: page});\n    }\n\n    onPageAvailableCourseChange(page) {\n        this.setState({pageAvailableCourses: page});\n    }\n\n    componentWillMount() {\n        this.updateBankCoursesAsync();\n        this.updateAvailableCoursesAsync();\n        this.updateAvailableCoursesToCopyAsync();\n        this.updateTasksAsync();\n    }\n\n    render() {\n        return (\n            <Tabs defaultActiveKey={1} id=\"bank-page-tabs\">\n                <Tab eventKey={1} title=\"Courses\">\n                    <BankCourseList\n                        limit={this.limit}\n                        courses={this.state.courses}\n                        availableCourses={this.state.availableCourses}\n                        page={this.state.pageCourses}\n                        totalPages={this.state.totalPagesCourses}\n                        pageAvailableCourses={this.state.pageAvailableCourses}\n                        totalAvailableCoursePages={this.state.totalPagesAvailableCourses}\n                        dataAlert={this.state.dataAlertCourseList}\n                        callbackOnChildChangedClose={this.onAlertCourseListClose}\n                        callbackUpdateTask={this.updateTasksAsync}\n                        callbackUpdateBank={this.updateBankCoursesAsync}\n                        callbackUpdateAvailable={this.updateAvailableCoursesAsync}\n                        callbackOnPageChange={this.onPageCourseChange}\n                        callbackOnPageAvailableCourseChange={this.onPageAvailableCourseChange}\n                        callbackOnDeleteCourse={this.deleteCourse}\n                        callbackAddCourse={this.addCourse}\n                        callbackSetAlertInvisible={this.setAlertCourseListInvisible}\n                    />\n                </Tab>\n                <Tab eventKey={2} title=\"Tasks\">\n                    <TaskList\n                        tasks={this.state.tasks}\n                        limit={this.limit}\n                        page={this.state.pageTasks}\n                        totalPages={this.state.totalPagesTasks}\n                        courses={this.state.availableCoursesToCopy}\n                        dataAlert={this.state.dataAlertTaskList}\n                        callbackOnChildChangedClose={this.onAlertTaskListClose}\n                        callbackUpdateTasks={this.updateTasksAsync}\n                        callbackUpdateFilteredTasks={this.updateFilteredTasksAsync}\n                        callBackAddTaskToCourse={this.addTaskToCourse}\n                        callbackSetAlertInvisible={this.setAlertTaskListInvisible}\n                    />\n                </Tab>\n            </Tabs>\n        );\n    }\n}\n\nexport default BankPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport BankPage from \"./bank_page\";\n\nReactDOM.render(\n    (<BankPage/>),\n    document.getElementById('reactRoot')\n);"],"sourceRoot":""}